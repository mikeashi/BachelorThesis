% Encoding: UTF-8

@book{sklansky_2003,
  place     = {Las Vegas, NV},
  title     = {Hold 'em poker: For advanced players, 21st Century edition},
  publisher = {Two Plus Two Pub.},
  author    = {Sklansky, David},
  year      = {2003}
} 
 

@book{malmuth_2004,
  place     = {Henderson},
  title     = {Gambling theory and other topics},
  publisher = {Two plus two},
  author    = {Malmuth, Mason},
  year      = {2004}
} 

@article{bensson2013predicting,
  title={Predicting Texas Holdem Hand Strength},
  author={Bensson, James and Eckert, Alex and Wu, Maxwell},
  year={2013}
}


@article{billings_challenge_2002,
	title = {The challenge of poker},
	doi = {10.1016/s0004-3702(01)00130-8},
	journaltitle = {Artificial Intelligence},
	author = {Billings, Darse and Davidson, Aaron and Schaeffer, Jonathan and Szafron, Duane},
	date = {2002},
}


@article{papp_dealing_1998,
	title = {Dealing with imperfect information in poker},
	author = {Papp, Denis},
	date = {1998},
}



@article{davidson_improved_2000,
	title = {Improved Opponent Modeling in Poker},
	author = {Davidson, Aaron and Billings, D. and Schaeffer, J. and Szafron, D.},
	date = {2000},
}



% not reviewed

@article{AutomatedPlanningTheoryghallab2006,
  title    = {Automated {{Planning}}, {{Theory And Practice}}},
  author   = {Ghallab, Malik and Nau, Dana S. and Traverso, Paolo},
  date     = {2006-01-01},
  abstract = {1 Introduction and Overview I Classical Planning 2 Representations for Classical Planning*3 Complexity of Classical Planning*4 State-Space Planning*5 Plan-Space Planning II Neoclassical Planning 6 Planning-Graph Techniques*7 Propositional Satisfiability Techniques*8 Constraint Satisfaction Techniques III Heuristics and Control Strategies 9 Heuristics in Planning*10 Control Rules in Planning*11 Hierarchical Task Network Planning*12 Control Strategies in Deductive Planning IV Planning with Time and Resources 13 Time for Planning*14 Temporal Planning*15 Planning and Resource Scheduling V Planning under Uncertainty 16 Planning based on Markov Decision Processes*17 Planning based on Model Checking*18 Uncertainty with Neo-Classical Techniques VI Case Studies and Applications 19 Space Applications*20 Planning in Robotics*21 Planning for Manufacturability Analysis*22 Emergency Evacuation Planning *23 Planning in the Game of Bridge VII Conclusion 24 Conclusion and Other Topics VIII Appendices A Search Procedures and Computational Complexity*B First Order Logic*C Model Checking}
}

@article{IntroductionPlanningDomainhaslum2019,
  title        = {An {{Introduction}} to the {{Planning Domain Definition Language}}},
  author       = {Haslum, Patrik and Lipovetzky, Nir and Magazzeni, Daniele and {Christian Muise} and Muise, Christian},
  date         = {2019-04-02},
  journaltitle = {An Introduction to the Planning Domain Definition Language},
  doi          = {10.2200/s00900ed2v01y201902aim042},
  abstract     = {Abstract Planning is the branch of Artificial Intelligence (AI) that seeks to automate reasoning about plans, most importantly the reasoning that goes into formulating a plan to achieve a given goa...}
}

@article{AutomatedPlanningTheoryghallab2006,
  title    = {Automated {{Planning}}, {{Theory And Practice}}},
  author   = {Ghallab, Malik and Nau, Dana S. and Traverso, Paolo},
  date     = {2006-01-01},
  abstract = {1 Introduction and Overview I Classical Planning 2 Representations for Classical Planning*3 Complexity of Classical Planning*4 State-Space Planning*5 Plan-Space Planning II Neoclassical Planning 6 Planning-Graph Techniques*7 Propositional Satisfiability Techniques*8 Constraint Satisfaction Techniques III Heuristics and Control Strategies 9 Heuristics in Planning*10 Control Rules in Planning*11 Hierarchical Task Network Planning*12 Control Strategies in Deductive Planning IV Planning with Time and Resources 13 Time for Planning*14 Temporal Planning*15 Planning and Resource Scheduling V Planning under Uncertainty 16 Planning based on Markov Decision Processes*17 Planning based on Model Checking*18 Uncertainty with Neo-Classical Techniques VI Case Studies and Applications 19 Space Applications*20 Planning in Robotics*21 Planning for Manufacturability Analysis*22 Emergency Evacuation Planning *23 Planning in the Game of Bridge VII Conclusion 24 Conclusion and Other Topics VIII Appendices A Search Procedures and Computational Complexity*B First Order Logic*C Model Checking}
}

@article{OverviewHierarchicalTaskgeorgievski2014,
  title        = {An {{Overview}} of {{Hierarchical Task Network Planning}}},
  author       = {Georgievski, Ilce and Georgievski, Ilche and Aiello, Marco},
  date         = {2014-03-28},
  journaltitle = {arXiv: Artificial Intelligence},
  abstract     = {Hierarchies are the most common structure used to understand the world better. In galaxies, for instance, multiple-star systems are organised in a hierarchical system. Then, governmental and company organisations are structured using a hierarchy, while the Internet, which is used on a daily basis, has a space of domain names arranged hierarchically. Since Artificial Intelligence (AI) planning portrays information about the world and reasons to solve some of world’s problems, Hierarchical Task Network (HTN) planning has been introduced almost 40 years ago to represent and deal with hierarchies. Its requirement for rich domain knowledge to characterise the world enables HTN planning to be very useful, but also to perform well. However, the history of almost 40 years obfuscates the current understanding of HTN planning in terms of accomplishments, planning models, similarities and dierences among hierarchical planners, and its current and objective image. On top of these issues, attention attracts the ability of hierarchical planning to truly cope with the requirements of applications from the real world. We propose a framework-based approach to remedy this situation. First, we provide a basis for defining dierent formal models of hierarchical planning, and define two models that comprise a large portion of HTN planners. Second, we provide a set of concepts that helps to interpret HTN planners from the aspect of their search space. Then, we analyse and compare the planners based on a variety of properties organised in five segments, namely domain authoring, expressiveness, competence, performance and applicability. Furthermore, we select Web service composition as a real-world and current application, and classify and compare the approaches that employ HTN planning to solve the problem of service composition. Finally, we conclude with our findings and present directions for future work.},
  keywords     = {HTN,Overview}
}

@thesis{alnazer2019htn,
  title    = {{{HTN}} Planning with Utilities},
  author   = {Alnazer, Ebaa},
  date     = {2019},
  keywords = {HTN,Overview}
}


@article{PlanningSatisfiabilitykautz1992,
  title        = {Planning as Satisfiability},
  author       = {Kautz, Henry and Selman, Bart},
  date         = {1992-08-30},
  journaltitle = {ECAI},
  pages        = {359--363}
}

@incollection{georgievski2014utility,
  title     = {Utility-based HTN planning},
  author    = {Georgievski, Ilche and Lazovik, Alexander},
  booktitle = {ECAI 2014},
  pages     = {1013--1014},
  year      = {2014},
  publisher = {IOS Press}
}

@article{ComplexityDecidabilityUndecidabilityerol1995,
  title        = {Complexity, Decidability and Undecidability Results for Domain-Independent Planning},
  author       = {Erol, Kutluhan and Nau, Dana S. and Subrahmanian, V. S.},
  date         = {1995-07-01},
  journaltitle = {Artificial Intelligence},
  volume       = {76},
  number       = {1},
  pages        = {75--88},
  doi          = {10.1016/0004-3702(94)00080-k},
  abstract     = {Abstract   In this paper, we examine how the complexity of domain-independent planning with STRIPS-style operators depends on the nature of the planning operators.  We show conditions under which planning is decidable and undecidable. Our results on this topic solve an open problem posed by Chapman (1987), and clear up some difficulties with his undecidability theorems.  For those cases where planning is decidable, we explain how the time complexity varies depending on a wide variety of conditions:   •   • whether or not function symbols are allowed;   •   • whether or not delete lists are allowed;   •   • whether or not negative preconditions are allowed;   •   • whether or not the predicates are restricted to be propositional (i.e., 0-ary);   •   • whether the planning operators are given as part of the input to the planning problem, or instead are fixed in advance.   •   • whether or not the operators can have conditional effects.}
}

@article{NonlinearNaturePlanssacerdoti1975,
  title    = {The Nonlinear Nature of Plans},
  author   = {Sacerdoti, Earl D. and {Earl D. Sacerdoti}},
  date     = {1975-09-03},
  pages    = {206--214},
  abstract = {We usually think of plans as linear sequences of actions. This is because plans are usually executed one step at a time. But plans themselves are not constrained by limitations of linearity. This paper describes a new information structure, called the procedural net, that represents a plan as a partial ordering of actions with respec to time. By avoiding premature commitments to a particular order for achieving subgoals, a problem-solving system using this representation can deal easily and directly with problems that are otherwise very difficult to solve.}
}

@article{PracticalPlanningExtendingwilkins1989,
  title    = {Practical {{Planning}}: {{Extending}} the {{Classical AI Planning Paradigm}}},
  author   = {Wilkins, David E.},
  date     = {1989-01-14},
  abstract = {1 Reasoning about Actions and Planning 2 Basic Assumptions and Limitations 3 SIPE and Its Representations 4 Hierarchical Planning as Differing Abstraction Levels 5 Constraints 6. The Truth Criterion 7 Deductive Causal Theories 8 Plan Critics 9 Resources: Reusable, Consumable, Temporal 10 Search 11 Replanning During Execution 12 Planning and Reactivity 13 Achieving Heuristic Adequacy 14 Comparison with Other Systems}
}

@article{FormalizingPlanningKnowledgeyang1990,
  title    = {Formalizing Planning Knowledge for Hierarchical Planning},
  author   = {Yang, Qiang},
  date     = {1990-01-03},
  volume   = {6},
  number   = {1},
  pages    = {12--24},
  doi      = {10.1111/j.1467-8640.1990.tb00126.x},
  abstract = {A hierarchical planning system achieves efficiency by planning with the most important conditions first, and considering details later in the planning process. Few attempts have been made to formalize the structure of the planning knowledge for hierarchical planning. For a given domain, there is usually more than one way to define its planning knowledge. Some of the definitions can lead to efficient planning, while others may not. In this paper, we provide a set of restrictions which defines the relationships between a non-primitive action and its set of subactions. When satisfied, these restrictions guarantee improved efficiency for hierarchical planning. One important feature of these restrictions is that they are syntactic and therefore do not depend on the particular structure of any plan. Along with these restrictions, we also provide algorithms for preprocessing the planning knowledge of a hierarchical planner. When used during planning, the preprocessed operator hierarchies can enable a planner to significantly reduce its search space. Un systeme de planification hierarchique permet d'obtenir un rendement efficace dans la mesure ou il planifie d'abord les conditions importantes avant de s'attarder aux details secondares dans le processus de planification. Quelques ten-tatives ont ete realisees en vue de formaliser la structure des connaissances de planification dans la planification hierarchique. Dans un domaine donne, il existe normalement plus d'une facon de definir les connaissances de planification. Certaines definitions peuvent permettre une planification efficace et d'autres non. Dans cet article, l'auteur propose une serie de restrictions qui definissent les rapports entre une action non primitive et son ensemble de sous-actions. Lorsqu'elles sont respectees, ces restrictions permettent d'ameliorer l'efficacite dans la planification hierarchique. l'une des caracteristiques importantes de ces restrictions est qu'elles sont syntaxiques et ne dependent done pas de la structure particuliere d'un plan. En plus de ces restrictions, l'auteur propose egalement des algorithmes pour le pretraitement des connaissances de planification d'un planificateur hierarchique. Quand elles sont utilisees durant la planification, les hierarchies d'operateur peuvent permettre au planificateur de reduire considerablement son espace de recherche.}
}


@article{PANDAFrameworkHierarchicalholler2021,
  title        = {The {{PANDA Framework}} for {{Hierarchical Planning}}},
  author       = {Höller, Daniel and Behnke, Gregor and Bercher, Pascal and Biundo, Susanne},
  date         = {2021},
  journaltitle = {Künstliche Intelligenz},
  pages        = {1--6},
  doi          = {10.1007/s13218-020-00699-y},
  abstract     = {During the last years, much progress has been made in hierarchical planning towards domain-independent systems that come with sophisticated techniques to solve planning problems instead of relying on advice in the input model. Several of these novel methods have been integrated into the PANDA framework, which is a software system to reason about hierarchical planning tasks. Besides solvers for planning problems based on plan space search, progression search, and translation to propositional logic, it also includes techniques for related problems like plan repair, plan and goal recognition, or plan verification. These various techniques share a common infrastructure, like e.g. a standard input language or components for grounding and reachability analysis. This article gives an overview over the PANDA framework, introduces the basic techniques from a high level perspective, and surveys the literature describing the diverse components in detail.},
  keywords     = {Framework,HTN,Overview,PANDA,Review}
}

@article{bercher_survey_2019,
  title        = {A Survey on Hierarchical Planning – One Abstract Idea, Many Concrete Realizations},
  doi          = {10.24963/ijcai.2019/875},
  abstract     = {Hierarchical planning has attracted renewed interest in the last couple of years, which led to numerous novel formalisms, problem classes, and theoretical investigations. Yet it is important to differentiate between the various formalisms and problem classes, since they show -- sometimes fundamental -- differences with regard to their expressivity and computational complexity: Some of them can be regarded equivalent to non-hierarchical formalisms while others are clearly more expressive. We survey the most important hierarchical problem classes and explain their differences and similarities. We furthermore give pointers to some of the best-known planning systems capable of solving the respective problem classes.},
  pages        = {6267--6275},
  journaltitle = {{IJCAI}},
  author       = {Bercher, Pascal and Alford, Ron and Höller, Daniel},
  date         = {2019-08-01},
  doi          = {10.24963/ijcai.2019/875},
  keywords     = {{HTN}}
}

@article{aeronautiques1998pddl,
  title   = {PDDL| The Planning Domain Definition Language},
  author  = {Aeronautiques, Constructions and Howe, Adele and Knoblock, Craig and McDermott, ISI Drew and Ram, Ashwin and Veloso, Manuela and Weld, Daniel and SRI, David Wilkins and Barrett, Anthony and Christianson, Dave and others},
  journal = {Technical Report, Tech. Rep.},
  year    = {1998}
}

@article{fishburn1968utility,
  title     = {Utility theory},
  author    = {Fishburn, Peter C},
  journal   = {Management science},
  volume    = {14},
  number    = {5},
  pages     = {335--378},
  year      = {1968},
  publisher = {INFORMS}
}

@article{alnazer2022risk,
  title   = {Risk Awareness in HTN Planning},
  author  = {Alnazer, Ebaa and Georgievski, Ilche and Aiello, Marco},
  journal = {arXiv preprint arXiv:2204.10669},
  year    = {2022}
}

@incollection{kahneman2013prospect,
  title     = {Prospect theory: An analysis of decision under risk},
  author    = {Kahneman, Daniel and Tversky, Amos},
  booktitle = {Handbook of the fundamentals of financial decision making: Part I},
  pages     = {99--127},
  year      = {2013},
  publisher = {World Scientific}
}

@book{williamson2012frontier,
  title     = {Frontier Gambling},
  author    = {Williamson, GR},
  year      = {2012},
  publisher = {GR Williamson}
}

 @inbook{roya_2021,
  title     = {History of Poker},
  booktitle = {Card night: Classic games, classic decks, and the history behind them},
  publisher = {Running Press},
  author    = {Roya, Will},
  year      = {2021},
  pages     = {203}
} 
 